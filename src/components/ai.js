import { GoogleGenerativeAI } from '@google/generative-ai';

class GeminiService {
  constructor() {
    // L·∫•y API key t·ª´ environment variables
    const apiKey = import.meta.env.VITE_GEMINI_API_KEY;
    
    if (!apiKey) {
      throw new Error('VITE_GEMINI_API_KEY kh√¥ng ƒë∆∞·ª£c t√¨m th·∫•y trong environment variables');
    }

    this.genAI = new GoogleGenerativeAI(apiKey);
    this.model = this.genAI.getGenerativeModel({ model: 'gemini-2.5-flash' });
  }

  /**
   * T·∫°o vƒÉn b·∫£n t·ª´ prompt
   * @param {string} prompt - C√¢u h·ªèi ho·∫∑c y√™u c·∫ßu
   * @param {Object} options - T√πy ch·ªçn b·ªï sung
   * @returns {Promise<string>} - K·∫øt qu·∫£ t·ª´ Gemini AI
   */
  async generateText(prompt, options = {}) {
    try {
      const result = await this.model.generateContent(prompt);
      const response = result.response;
      const text = response.text();
      
      if (!text || text.trim().length === 0) {
        throw new Error('API tr·∫£ v·ªÅ response r·ªóng');
      }
      
      return text.trim();
    } catch (error) {
      console.error('L·ªói khi g·ªçi Gemini API:', error);
      throw new Error(`Kh√¥ng th·ªÉ t·∫°o n·ªôi dung: ${error.message}`);
    }
  }

  /**
   * Test function ƒë·ªÉ th·ª≠ c√°c c√°ch g·ªçi API kh√°c nhau
   */
  async testAPI() {
    console.log('üß™ Testing API calls...');
    const testPrompt = 'Xin ch√†o! H√£y tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát.';
    
    // Test 1: G·ªçi tr·ª±c ti·∫øp v·ªõi string
    try {
      console.log('üß™ Test 1: Simple string prompt');
      const result1 = await this.model.generateContent(testPrompt);
      const text1 = result1.response.text();
      console.log('‚úÖ Test 1 success:', text1);
      return { method: 'simple', response: text1 };
    } catch (error) {
      console.error('‚ùå Test 1 failed:', error.message);
    }

    // Test 2: G·ªçi v·ªõi object format
    try {
      console.log('üß™ Test 2: Object format');
      const result2 = await this.model.generateContent({
        contents: [{ parts: [{ text: testPrompt }] }]
      });
      const text2 = result2.response.text();
      console.log('‚úÖ Test 2 success:', text2);
      return { method: 'object', response: text2 };
    } catch (error) {
      console.error('‚ùå Test 2 failed:', error.message);
    }

    // Test 3: G·ªçi v·ªõi role format
    try {
      console.log('üß™ Test 3: Role format');
      const result3 = await this.model.generateContent({
        contents: [{ role: 'user', parts: [{ text: testPrompt }] }]
      });
      const text3 = result3.response.text();
      console.log('‚úÖ Test 3 success:', text3);
      return { method: 'role', response: text3 };
    } catch (error) {
      console.error('‚ùå Test 3 failed:', error.message);
    }

    throw new Error('All API test methods failed');
  }

  /**
   * T·∫°o n·ªôi dung v·ªõi context v·ªÅ t∆∞ t∆∞·ªüng H·ªì Ch√≠ Minh
   * @param {string} question - C√¢u h·ªèi v·ªÅ t∆∞ t∆∞·ªüng HCM
   * @returns {Promise<string>} - C√¢u tr·∫£ l·ªùi chi ti·∫øt
   */
  async askAboutHCMThought(question) {
    const context = `
    B·∫°n l√† m·ªôt chuy√™n gia v·ªÅ t∆∞ t∆∞·ªüng H·ªì Ch√≠ Minh. H√£y tr·∫£ l·ªùi c√¢u h·ªèi sau 
    d·ª±a tr√™n ki·∫øn th·ª©c v·ªÅ t∆∞ t∆∞·ªüng H·ªì Ch√≠ Minh v·ªÅ ƒë·ªôc l·∫≠p d√¢n t·ªôc v√† ch·ªß nghƒ©a x√£ h·ªôi.
    
    C√¢u h·ªèi: ${question}
    
    H√£y tr·∫£ l·ªùi m·ªôt c√°ch:
    - Ch√≠nh x√°c v√† c√≥ cƒÉn c·ª© l·ªãch s·ª≠
    - D·ªÖ hi·ªÉu cho h·ªçc sinh, sinh vi√™n
    - Kho·∫£ng 200-300 t·ª´
    - C√≥ th·ªÉ ƒë∆∞a ra v√≠ d·ª• c·ª• th·ªÉ
    `;

    return await this.generateText(context, {
      temperature: 0.7,
      maxOutputTokens: 1024
    });
  }

  /**
   * Gi·∫£i th√≠ch n·ªôi dung trang s√°ch
   * @param {number} pageNumber - S·ªë trang c·∫ßn gi·∫£i th√≠ch
   * @param {string} content - N·ªôi dung trang (optional)
   * @returns {Promise<string>} - Gi·∫£i th√≠ch chi ti·∫øt
   */
  async explainPageContent(pageNumber, content = '') {
    const prompt = `
    H√£y gi·∫£i th√≠ch n·ªôi dung trang ${pageNumber} trong s√°ch v·ªÅ t∆∞ t∆∞·ªüng H·ªì Ch√≠ Minh.
    ${content ? `N·ªôi dung trang: ${content}` : ''}
    
    H√£y ƒë∆∞a ra:
    1. T√≥m t·∫Øt √Ω ch√≠nh
    2. Gi·∫£i th√≠ch c√°c kh√°i ni·ªám quan tr·ªçng
    3. Li√™n h·ªá v·ªõi th·ª±c ti·ªÖn hi·ªán t·∫°i
    4. C√¢u h·ªèi t∆∞ duy cho ng∆∞·ªùi ƒë·ªçc
    
    Tr·∫£ l·ªùi b·∫±ng ti·∫øng Vi·ªát, kho·∫£ng 150-250 t·ª´.
    `;

    return await this.generateText(prompt, {
      temperature: 0.6,
      maxOutputTokens: 800
    });
  }

  /**
   * T·∫°o quiz v·ªÅ n·ªôi dung ƒë√£ h·ªçc
   * @param {string} topic - Ch·ªß ƒë·ªÅ c·∫ßn t·∫°o quiz
   * @param {number} questionCount - S·ªë c√¢u h·ªèi
   * @returns {Promise<Object>} - Danh s√°ch c√¢u h·ªèi v√† ƒë√°p √°n
   */
  async generateQuiz(topic, questionCount = 5) {
    const prompt = `
    T·∫°o ${questionCount} c√¢u h·ªèi tr·∫Øc nghi·ªám v·ªÅ "${topic}" trong t∆∞ t∆∞·ªüng H·ªì Ch√≠ Minh.
    
    Format tr·∫£ l·ªùi JSON nh∆∞ sau:
    {
      "questions": [
        {
          "question": "C√¢u h·ªèi",
          "options": ["A", "B", "C", "D"],
          "correct": 0,
          "explanation": "Gi·∫£i th√≠ch ƒë√°p √°n"
        }
      ]
    }
    
    Ch·ªâ tr·∫£ l·ªùi JSON, kh√¥ng c·∫ßn text kh√°c.
    `;

    try {
      const response = await this.generateText(prompt, {
        temperature: 0.5,
        maxOutputTokens: 1500
      });
      
      return JSON.parse(response);
    } catch (error) {
      console.error('L·ªói khi t·∫°o quiz:', error);
      throw new Error('Kh√¥ng th·ªÉ t·∫°o quiz');
    }
  }
}

// T·∫°o instance duy nh·∫•t (Singleton pattern)
const geminiService = new GeminiService();

// Export ƒë·ªÉ test t·ª´ console
window.testGeminiAPI = () => geminiService.testAPI();
window.geminiService = geminiService;

export default geminiService;